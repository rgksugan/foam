{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/3-resources/books/The-Phoenix-Project","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"fiction\",\n  \"type\": \"book\",\n  \"author\": \"Gene Kim, Kevin Behr and George Spafford\",\n  \"title\": \"The Phoenix Project\",\n  \"sub-title\": \"A Novel about IT, DevOps, and Helping Your Business Win\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"The Phoenix Project\"), mdx(\"p\", null, \"by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Gene-Kim\",\n    \"title\": \"Gene Kim\"\n  }, \"[[Gene Kim]]\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Kevin-Behr\",\n    \"title\": \"Kevin Behr\"\n  }, \"[[Kevin Behr]]\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/George-Spafford\",\n    \"title\": \"George Spafford\"\n  }, \"[[George Spafford]]\"), \"\"), mdx(\"h2\", null, \"Highlights\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Perfection is the enemy of good.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Your job as VP of IT Operations is to ensure the fast, predictable, and uninterrupted flow of planned work that delivers value to the business while minimizing the impact and disruption of unplanned work, so you can provide stable, predictable, and secure IT service.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Any improvement made after the bottleneck is useless, because it will always remain starved, waiting for work from the bottleneck. And any improvements made before the bottleneck merely results in more inventory piling up at the bottleneck. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../mental-models/theory-of-constraints\",\n    \"title\": \"theory-of-constraints\"\n  }, \"[[theory-of-constraints]]\"), \"\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I smirk at the reference to smoke tests, a term circuit designers use. The saying goes, \\u201CIf you turn the circuit board on and no smoke comes out, it\\u2019ll probably work.\\u201D\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Remember, unplanned work kills your ability to do planned work, so you must always do whatever it takes to eradicate it.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Being able to take needless work out of the system is more important than being able to put more work into the system.\")), mdx(\"h2\", null, \"Contents\"), mdx(\"h2\", null, \"The Book in 3 Sentences\"), mdx(\"h2\", null, \"Who Should Read It?\"), mdx(\"h2\", null, \"My Top 3 Quotes\"), mdx(\"h2\", null, \"Bibliography\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"The Phoenix Project","private":false},"tableOfContents":{"items":[{"url":"#the-phoenix-project","title":"The Phoenix Project","items":[{"url":"#highlights","title":"Highlights"},{"url":"#contents","title":"Contents"},{"url":"#the-book-in-3-sentences","title":"The Book in 3 Sentences"},{"url":"#who-should-read-it","title":"Who Should Read It?"},{"url":"#my-top-3-quotes","title":"My Top 3 Quotes"},{"url":"#bibliography","title":"Bibliography"}]}]},"outboundReferences":[{"contextLine":"> Any improvement made after the bottleneck is useless, because it will always remain starved, waiting for work from the bottleneck. And any improvements made before the bottleneck merely results in more inventory piling up at the bottleneck. [[theory-of-constraints]]","targetAnchor":null,"refWord":"theory-of-constraints","label":null,"target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Theory of Constraints\"), mdx(\"p\", null, \"The core concept of the Theory of Constraints is that every process has a single constraint and that total process throughput can only be improved when the constraint is improved. A very important corollary to this is that spending time optimizing non-constraints will not provide significant benefits; only improvements to the constraint will further the goal (achieving more profit).\"), mdx(\"p\", null, \"Thus, TOC seeks to provide precise and sustained focus on improving the current constraint until it no longer limits throughput, at which point the focus moves to the next constraint. The underlying power of TOC flows from its ability to generate a tremendously strong focus towards a single goal (profit) and to removing the principal impediment (the constraint) to achieving more of that goal.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"4c4071a3-a22c-58e4-a7cf-4394de4c5849","fields":{"slug":"/3-resources/mental-models/theory-of-constraints","title":"Theory of Constraints"}}}}],"inboundReferences":[]},"fields":{"slug":"/3-resources/books/The-Phoenix-Project","title":"The Phoenix Project"}}},"pageContext":{"id":"c209e89b-969e-5815-9674-0457f93c32bb","refWordMdxSlugDict":{"theory-of-constraints":"3-resources/mental-models/theory-of-constraints"},"tocTypes":["sidebar"]}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}