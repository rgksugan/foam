{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/3 Resources/books/Patterns-of-Enterprise-Application-Architecture","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"non-fiction\",\n  \"type\": \"book\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Patterns of Enterprise Application Architecture\"), mdx(\"p\", null, \"by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Martin-Fowler\",\n    \"title\": \"Martin Fowler\"\n  }, \"[[Martin Fowler]]\"), \"\"), mdx(\"h2\", null, \"Notes\"), mdx(\"h3\", null, \"0. Introduction\"), mdx(\"h3\", null, \"1. Layering\"), mdx(\"p\", null, \"One of the well known layering architecture is the Network OSI model.\"), mdx(\"img\", {\n    style: {\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\"\n    },\n    src: \"/knowledge/737d0a81e859c3fc856ec87a6fed8bff/101osi.png\",\n    alt: \"OSI network model\"\n  }), mdx(\"h4\", null, \"Pros and cons of Layer Architecture\"), mdx(\"h5\", null, \"Pros:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can understand a single layer as a coherent whole without knowing much about the other layers. You can understand how to build an FTP service on top of TCP without knowing the details of how ethernet works.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can substitute layers with alternative implementations of the same basic services. An FTP service can run without change over ethernet, PPP, or whatever a cable company uses.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You minimize dependencies between layers. If the cable company changes its physical transmission system, providing they make IP work, we don\\u2019t have to alter our FTP service.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layers make good places for standardization. TCP and IP are standards because they define how their layers should operate.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once you have a layer built, you can use it for many higher-level services. Thus, TCP/IP is used by FTP, telnet, SSH, and HTTP. Otherwise, all of these higher-level protocols would have to write their own lower-level protocols.\")), mdx(\"h5\", null, \"Cons:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layers encapsulate some, but not all, things well. As a result you sometimes get cascading changes. The classic example of this in a layered enterprise application is adding a field that needs to display on the UI, must be in the database, and thus must be added to every layer in between.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Extra layers can harm performance. At every layer things typically need to be transformed from one representation to another. However, the encapsulation of an underlying function often gives you efficiency gains that more than compensate. A layer that controls transactions can be optimized and will then make everything faster.\")), mdx(\"h4\", null, \"The Three Principal layers of Enterprise Applications\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Presentation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Domain (Business logic)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Data source\")), mdx(\"h3\", null, \"2. Organizing Domain Logic\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transaction Script\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Domain Model\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Table Module\")), mdx(\"h2\", null, \"Bibliography\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/A-Pattern-Language\",\n    \"title\": \"A Pattern Language\"\n  }, \"[[A Pattern Language]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./Extreme%20Programming%20Explained.md\"\n  }, \"Extreme Programming Explained\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Test-Driven-Development\",\n    \"title\": \"Test-Driven Development\"\n  }, \"[[Test-Driven Development]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Domain-Driven-Design\",\n    \"title\": \"Domain-Driven Design\"\n  }, \"[[Domain-Driven Design]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Refactoring\",\n    \"title\": \"Refactoring\"\n  }, \"[[Refactoring]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Design-Patterns\",\n    \"title\": \"Design Patterns\"\n  }, \"[[Design Patterns]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#patterns-of-enterprise-application-architecture","title":"Patterns of Enterprise Application Architecture","items":[{"url":"#notes","title":"Notes","items":[{"url":"#0-introduction","title":"0. Introduction"},{"url":"#1-layering","title":"1. Layering","items":[{"url":"#pros-and-cons-of-layer-architecture","title":"Pros and cons of Layer Architecture","items":[{"url":"#pros","title":"Pros:"},{"url":"#cons","title":"Cons:"}]},{"url":"#the-three-principal-layers-of-enterprise-applications","title":"The Three Principal layers of Enterprise Applications"}]},{"url":"#2-organizing-domain-logic","title":"2. Organizing Domain Logic"}]},{"url":"#bibliography","title":"Bibliography"}]}]},"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/3 Resources/books/Patterns-of-Enterprise-Application-Architecture","title":"Patterns of Enterprise Application Architecture"}}},"pageContext":{"id":"f3151c70-5ed4-551c-9ba8-6619831ebfb6","refWordMdxSlugDict":{},"tocTypes":["sidebar"]}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}